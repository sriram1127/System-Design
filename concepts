Distributed Computing Types
Mobile and ubiquitous Computing

Distributed System Security - 
Authentication(login) & Authorization(contracts)
Digital Signatures
DOS attacks

Eventual Consistency in microservices
parallel computing(shared memory) vs distributed computing(no shared memory)
Thrift & GRPC accomplish faster messaging with higher thorughput - no HTTP
CRDT - Conflict Free Replicated Data types - NP- counter
CDN - content delivery network
Traffic to server may not be uniform / overloading
Trade off between reading and writing 
Virtual nodes
Hashes are uniformly random
Distributed Storage 
TTL time to live - transient - lasting for a short span
max tries
k_dimensional tree
Increased demand
Indexes
CAP theorem
Redis or In-memory cache
Load balancer
High Availablity
Serviceability or Manageability
Scalability
Maintainability
Round Robin
Sharding or Data Partitioning
Horizotal Sharding or scaling
Directory based Partitioning
Performance
Hashing
Consistent Hashing / DHT - Distributed Hash Tables
Data Integrity
Composition
Uniform load distribution
Expandable
Downtime
Single point of failure
Process and Threads
Producer and Consumer Algorithm
Redis 
Kafka Queue
TCP HTTP Protocal
Unix or Epoch Time
Staging Environment
Continuous Delivery & continuous Integration
TLB Transition LookAside Buffer - operating system
DOS - Denial of servcie
Bloom Filter


Blue Green Deployment
https://martinfowler.com/bliki/BlueGreenDeployment.html
https://phauer.com/2015/databases-challenge-continuous-delivery/

SQL vs NoSQL
SQL
ACID Atomicity - Consistency - Isolation - Durability
NOSQL
Eventually Consistent - Scalable

Key value DB - Redis Dynamo DB
Document Storage - Mongo, Couch DB
Wide column storage DB - Hbase, Cassandra DB
Grpah DB - Neo4j & Infinite Graph 

Unique ID generation (64bits)
1. Flikr Database ticket service
2. Twitter Snowflake
3. UUID
4. MongoDB 96bits ID generator

Hit Counter
https://aonecode.com/getArticle/211

Links
https://github.com/checkcheckzz/system-design-interview

TCP vs UDP 
TCP Transmission Control Protocol
reliable, error checking, no corruption, packet resent if missed, high payload
UDP User Datagram Protocol
Faster, no error checking, used in games and streaming, packets not resent if missed.


Bloom Filters
probablistic data structure
Space -efficient - some false positives - no false negatives - 
More the bit array size and more the hash function - less will be the false postive - but increase the latency
examples:
Medium uses bloom filters for recommending post to users by filtering post which have been seen by user.
Quora implemented a shared bloom filter in the feed backend to filter out stories that people have seen before.
The Google Chrome web browser used to use a Bloom filter to identify malicious URLs

SVN
merkel Tree

