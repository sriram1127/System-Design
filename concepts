Hashes are uniformly random
Distributed Storage 
TTL time to live - transient - lasting for a short span
max tries
k_dimensional tree
Increased demand
Indexes
CAP theorem
Redis or In-memory cache
Load balancer
High Availablity
Serviceability or Manageability
Scalability
Maintainability
Round Robin
Sharding or Data Partitioning
Horizotal Sharding or scaling
Performance
Hashing
Consistent Hashing
Data Integrity
Composition
Uniform load distribution
Expandable
Downtime
Single point of failure
Process and Threads
Producer and Consumer Algorithm
Redis 
Kafka Queue
TCP HTTP Protocal
Unix or Epoch Time
Staging Environment
Continuous Delivery & continuous Integration
TLB Transition LookAside Buffer - operating system
DOS - Denial of servcie
Bloom Filter


Blue Green Deployment
https://martinfowler.com/bliki/BlueGreenDeployment.html
https://phauer.com/2015/databases-challenge-continuous-delivery/

SQL vs NoSQL
SQL
ACID Atomicity - Consistency - Isolation - Durability
NOSQL
Eventually Consistent - Scalable

Unique ID generation (64bits)
1. Flikr Database ticket service
2. Twitter Snowflake
3. UUID
4. MongoDB 96bits ID generator

Hit Counter
https://aonecode.com/getArticle/211

Links
https://github.com/checkcheckzz/system-design-interview

TCP vs UDP 
TCP Transmission Control Protocol
reliable, error checking, no corruption, packet resent if missed, high payload
UDP User Datagram Protocol
Faster, no error checking, used in games and streaming, packets not resent if missed.


